
AVRASM ver. 2.2.7  D:\AVR\Projects\RF_ASK_Rx_sYmBoLs_JoyStick\RF_ASK_Rx_sYmBoLs_JoyStick\main.asm Tue Jul 07 01:57:17 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m16adef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.209\avrasm\inc\m16adef.inc'
                                 
                                 ;--------------------------------------------------------
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16A.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16ADEF_INC_
                                 #define _M16ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16A
                                 #pragma AVRPART ADMIN PART_NAME ATmega16A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16ADEF_INC_ */
                                 
                                 
                                 ;
                                 ;  Introduction:
                                 ;
                                 ;  RF ASK Module Receiver Program (with sYmBoLs)
                                 ;
                                 ;  Copyright (C) 2020 Omar Walid Mostafa
                                 ;  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License 
                                 ;  as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
                                 ;  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
                                 ;  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
                                 ;  See the GNU General Public License for more details.
                                 ;  You should have received a copy of the GNU General Public License along with this program; 
                                 ;  if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
                                 ;
                                 ;  DEVICE: ATMega16A
                                 ;  CLOCK FREQUENCY: 8MHz
                                 ;
                                 ;  This program uses ASK (Amplitude Shift Keying) to send data
                                 ;  It is typically written for FS1000A Module (433MHz rf module)
                                 ;  It is based on RadioHead library which is a Copyright of Mike McCauley and is distributed under the GPL V2 Open Source License
                                 ;  The code is also based on information presented in ASH Transceiver Software Designer's Guide of 2002.08.07
                                 ;
                                 ;  In this program, the data is received in sYmBoLs through UART
                                 ;  The data represents the position of a joy stick, based on which an LED will be lit
                                 ;  We decode the symbols to the original data and then decide which LED should be ON
                                 ;
                                 ;  Hardware connection of receiver:
                                 ;  RX pin connects to DATA pin of receiver module
                                 ;  GND of ATmega16A connects to GND of receiver module
                                 ;  Provide VCC to receiver module (5V)
                                 ;
                                 ;  Hardware connection to LEDs:
                                 ;  Center LED <------------> PORTA2
                                 ;  Left1 LED <-------------> PORTA1
                                 ;  Left2 LED <-------------> PORTA0
                                 ;  Right1 LED <------------> PORTA5
                                 ;  Right2 LED <------------> PORTA6
                                 ;  Down1 LED <-------------> PORTA3
                                 ;  Down2 LED <-------------> PORTA4
                                 ;  Up1 LED <---------------> PORTC7
                                 ;  Up2 LED <---------------> PORTC6
                                 ;
                                 ;--------------------------------------------------------
                                 
                                 ; Definitions:
                                 
                                 ; LEDs connected on PORT A
                                 
                                 .EQU LEFT2_LED = 0
                                 .EQU LEFT1_LED = 1
                                 .EQU CENTER_LED = 2
                                 .EQU DOWN1_LED = 3
                                 .EQU DOWN2_LED = 4
                                 .EQU RIGHT1_LED = 5
                                 .EQU RIGHT2_LED = 6
                                 
                                 ; LEDs connected on PORT C
                                 
                                 .EQU UP2_LED = 6
                                 .EQU UP1_LED = 7
                                 
                                 .DEF GREG1 = R16 ; General Register 1
                                 .DEF GREG2 = R17 ; General Register 2
                                 .DEF GREG3 = R18
                                 .DEF ADC_VALX_L = R19 ; Analog X value LOW
                                 .DEF ADC_VALX_H = R20 ; Analog X value HIGH
                                 .DEF ADC_VALY_L = R21 ; Analog Y value LOW
                                 .DEF ADC_VALY_H = R22 ; Analog Y value HIGH
                                 .DEF DREG = R23 ; DATA REGISTER
                                 .DEF SYM_POINTER = R24
                                 
                                 ;--------------------------------------------------------
                                 
                                 ; Main Program:
                                 
                                 .ORG 0X00
                                 
000000 c02f                      RJMP PROGRAM
                                 
                                 .ORG 0X30
                                 
                                 PROGRAM:
                                 
000030 e004                      LDI GREG1, HIGH(RAMEND)
000031 bf0e                      OUT SPH, GREG1
000032 e50f                      LDI GREG1, LOW(RAMEND)
000033 bf0d                      OUT SPL, GREG1
                                 
                                 ; Set data direction
                                 
000034 ef0f                      LDI GREG1, 0XFF
000035 bb0a                      OUT DDRA, GREG1
000036 9aa6                      SBI DDRC, 6
000037 9aa7                      SBI DDRC, 7
                                 
                                 ; Initialize UART
                                 
000038 e802                      LDI GREG1, 0B10000010 ; Writing to UCSRC, Asynchronus Mode, No parity, 1 stop bit, 6-bit data size
000039 bd00                      OUT UCSRC, GREG1
00003a ef09                      LDI GREG1, 249 ; UBRRL = (8,000,000/(16*2000))-1 = 249 ---> 2000BPS baud rate
00003b b909                      OUT UBRRL, GREG1
00003c e100                      LDI GREG1, (1<<RXEN) ; Enable Receiver and Transmitter
00003d b90a                      OUT UCSRB, GREG1
                                 
                                 WAIT_FOR_DATA:
00003e b10b                      IN GREG1, UCSRA
00003f ff07                      SBRS GREG1, RXC
000040 cffd                      RJMP WAIT_FOR_DATA
000041 b90b                      OUT UCSRA, GREG1
000042 b10c                      IN GREG1, UDR
000043 300d                      CPI GREG1, 0X0D ; First 6 bits of the start symbol
000044 f009                      BREQ SCND_PRT
000045 cff8                      RJMP WAIT_FOR_DATA
                                 
                                 SCND_PRT:
000046 b10b                      IN GREG1, UCSRA
000047 ff07                      SBRS GREG1, RXC
000048 cffd                      RJMP SCND_PRT
000049 b90b                      OUT UCSRA, GREG1
00004a b10c                      IN GREG1, UDR
00004b 3206                      CPI GREG1, 0X26 ; Second 6 bits of the start symbol
00004c f009                      BREQ RCV_L_NIB_ADCX_L
00004d cff0                      RJMP WAIT_FOR_DATA
                                 
                                 RCV_L_NIB_ADCX_L:
00004e b10b                      IN GREG1, UCSRA
00004f ff07                      SBRS GREG1, RXC
000050 cffd                      RJMP RCV_L_NIB_ADCX_L
000051 b90b                      OUT UCSRA, GREG1
000052 b17c                      IN DREG, UDR
000053 d088                      RCALL SYM_TO_ORG_L
                                 
                                 RCV_H_NIB_ADCX_L:
000054 b10b                      IN GREG1, UCSRA
000055 ff07                      SBRS GREG1, RXC
000056 cffd                      RJMP RCV_H_NIB_ADCX_L
000057 b90b                      OUT UCSRA, GREG1
000058 b17c                      IN DREG, UDR
000059 d08e                      RCALL SYM_TO_ORG_H
                                 
00005a 2f38                      MOV ADC_VALX_L, SYM_POINTER
                                 
                                 RCV_L_NIB_ADCX_H:
00005b b10b                      IN GREG1, UCSRA
00005c ff07                      SBRS GREG1, RXC
00005d cffd                      RJMP RCV_L_NIB_ADCX_H
00005e b90b                      OUT UCSRA, GREG1
00005f b17c                      IN DREG, UDR
000060 d07b                      RCALL SYM_TO_ORG_L
                                 
                                 RCV_H_NIB_ADCX_H:
000061 b10b                      IN GREG1, UCSRA
000062 ff07                      SBRS GREG1, RXC
000063 cffd                      RJMP RCV_H_NIB_ADCX_H
000064 b90b                      OUT UCSRA, GREG1
000065 b17c                      IN DREG, UDR
000066 d081                      RCALL SYM_TO_ORG_H
                                 
000067 2f48                      MOV ADC_VALX_H, SYM_POINTER
                                 
                                 RCV_L_NIB_ADCY_L:
000068 b10b                      IN GREG1, UCSRA
000069 ff07                      SBRS GREG1, RXC
00006a cffd                      RJMP RCV_L_NIB_ADCY_L
00006b b90b                      OUT UCSRA, GREG1
00006c b17c                      IN DREG, UDR
00006d d06e                      RCALL SYM_TO_ORG_L
                                 
                                 RCV_H_NIB_ADCY_L:
00006e b10b                      IN GREG1, UCSRA
00006f ff07                      SBRS GREG1, RXC
000070 cffd                      RJMP RCV_H_NIB_ADCY_L
000071 b90b                      OUT UCSRA, GREG1
000072 b17c                      IN DREG, UDR
000073 d074                      RCALL SYM_TO_ORG_H
                                 
000074 2f58                      MOV ADC_VALY_L, SYM_POINTER
                                 
                                 RCV_L_NIB_ADCY_H:
000075 b10b                      IN GREG1, UCSRA
000076 ff07                      SBRS GREG1, RXC
000077 cffd                      RJMP RCV_L_NIB_ADCY_H
000078 b90b                      OUT UCSRA, GREG1
000079 b17c                      IN DREG, UDR
00007a d061                      RCALL SYM_TO_ORG_L
                                 
                                 RCV_H_NIB_ADCY_H:
00007b b10b                      IN GREG1, UCSRA
00007c ff07                      SBRS GREG1, RXC
00007d cffd                      RJMP RCV_H_NIB_ADCY_H
00007e b90b                      OUT UCSRA, GREG1
00007f b17c                      IN DREG, UDR
000080 d067                      RCALL SYM_TO_ORG_H
                                 
000081 2f68                      MOV ADC_VALY_H, SYM_POINTER
                                 
                                 ; Now we have a value ranging from 0~1023 in registers ADC_VALX_H:ADC_VALX_L & ADC_VALY_H:ADC_VALY_L
                                 ; We now take the decision to turn on an LED based on the range of that value:
                                 ; If X > 816 --> Up 2 LED ON
                                 ; Else if X > 612 --> Up 1 LED ON
                                 ; Else if X > 408 --> Center LED ON
                                 ; Else if X > 204 --> Down 1 LED ON
                                 ; Else --> Down 2 LED ON
                                 
                                 CHECK_IF_Y:
000082 e604                      LDI GREG1, LOW(612)
000083 e012                      LDI GREG2, HIGH(612)
000084 1750                      CP ADC_VALY_L, GREG1
000085 0761                      CPC ADC_VALY_H, GREG2
000086 f590                      BRSH GO_TO_Y
000087 e908                      LDI GREG1, LOW(408)
000088 e011                      LDI GREG2, HIGH(408)
000089 1750                      CP ADC_VALY_L, GREG1
00008a 0761                      CPC ADC_VALY_H, GREG2
00008b f168                      BRLO GO_TO_Y
                                 
                                 CHECK_UP2:
00008c e300                      LDI GREG1, LOW(816)
00008d e013                      LDI GREG2, HIGH(816)
00008e 1730                      CP ADC_VALX_L, GREG1
00008f 0741                      CPC ADC_VALX_H, GREG2
000090 f028                      BRLO CHECK_UP1
000091 e000                      LDI GREG1, 0X00
000092 bb0b                      OUT PORTA, GREG1
000093 e400                      LDI GREG1, (1<<UP2_LED)
000094 bb05                      OUT PORTC, GREG1
000095 cfa8                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_UP1:
000096 e604                      LDI GREG1, LOW(612)
000097 e012                      LDI GREG2, HIGH(612)
000098 1730                      CP ADC_VALX_L, GREG1
000099 0741                      CPC ADC_VALX_H, GREG2
00009a f028                      BRLO CHECK_CENTER
00009b e000                      LDI GREG1, 0X00
00009c bb0b                      OUT PORTA, GREG1
00009d e800                      LDI GREG1, (1<<UP1_LED)
00009e bb05                      OUT PORTC, GREG1
00009f cf9e                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_CENTER:
0000a0 e908                      LDI GREG1, LOW(408)
0000a1 e011                      LDI GREG2, HIGH(408)
0000a2 1730                      CP ADC_VALX_L, GREG1
0000a3 0741                      CPC ADC_VALX_H, GREG2
0000a4 f028                      BRLO CHECK_DOWN1
0000a5 e000                      LDI GREG1, 0X00
0000a6 bb05                      OUT PORTC, GREG1
0000a7 e004                      LDI GREG1, (1<<CENTER_LED)
0000a8 bb0b                      OUT PORTA, GREG1
0000a9 cf94                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_DOWN1:
0000aa ec0c                      LDI GREG1, LOW(204)
0000ab e010                      LDI GREG2, HIGH(204)
0000ac 1730                      CP ADC_VALX_L, GREG1
0000ad 0741                      CPC ADC_VALX_H, GREG2
0000ae f028                      BRLO CHECK_DOWN2
0000af e000                      LDI GREG1, 0X00
0000b0 bb05                      OUT PORTC, GREG1
0000b1 e008                      LDI GREG1, (1<<DOWN1_LED)
0000b2 bb0b                      OUT PORTA, GREG1
0000b3 cf8a                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_DOWN2:
0000b4 e000                      LDI GREG1, 0X00
0000b5 bb05                      OUT PORTC, GREG1
0000b6 e100                      LDI GREG1, (1<<DOWN2_LED)
0000b7 bb0b                      OUT PORTA, GREG1
0000b8 cf85                      RJMP WAIT_FOR_DATA
                                 
                                 GO_TO_Y:
                                 
                                 CHECK_RIGHT2:
0000b9 e300                      LDI GREG1, LOW(816)
0000ba e013                      LDI GREG2, HIGH(816)
0000bb 1750                      CP ADC_VALY_L, GREG1
0000bc 0761                      CPC ADC_VALY_H, GREG2
0000bd f028                      BRLO CHECK_RIGHT1
0000be e000                      LDI GREG1, 0X00
0000bf bb05                      OUT PORTC, GREG1
0000c0 e400                      LDI GREG1, (1<<RIGHT2_LED)
0000c1 bb0b                      OUT PORTA, GREG1
0000c2 cf7b                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_RIGHT1:
0000c3 e604                      LDI GREG1, LOW(612)
0000c4 e012                      LDI GREG2, HIGH(612)
0000c5 1750                      CP ADC_VALY_L, GREG1
0000c6 0761                      CPC ADC_VALY_H, GREG2
0000c7 f028                      BRLO CHECK_LEFT1
0000c8 e000                      LDI GREG1, 0X00
0000c9 bb05                      OUT PORTC, GREG1
0000ca e200                      LDI GREG1, (1<<RIGHT1_LED)
0000cb bb0b                      OUT PORTA, GREG1
0000cc cf71                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_LEFT1:
0000cd ec0c                      LDI GREG1, LOW(204)
0000ce e010                      LDI GREG2, HIGH(204)
0000cf 1750                      CP ADC_VALY_L, GREG1
0000d0 0761                      CPC ADC_VALY_H, GREG2
0000d1 f028                      BRLO CHECK_LEFT2
0000d2 e000                      LDI GREG1, 0X00
0000d3 bb05                      OUT PORTC, GREG1
0000d4 e002                      LDI GREG1, (1<<LEFT1_LED)
0000d5 bb0b                      OUT PORTA, GREG1
0000d6 cf67                      RJMP WAIT_FOR_DATA
                                 
                                 CHECK_LEFT2:
0000d7 e000                      LDI GREG1, 0X00
0000d8 bb05                      OUT PORTC, GREG1
0000d9 e001                      LDI GREG1, (1<<LEFT2_LED)
0000da bb0b                      OUT PORTA, GREG1
0000db cf62                      RJMP WAIT_FOR_DATA
                                 
                                 ;--------------------------------------------------------
                                 
                                 ; Functions:
                                 
                                 SYM_TO_ORG_L:
0000dc 2788                      CLR SYM_POINTER
0000dd e0f1                      LDI ZH, HIGH(sYmBoLs<<1)
0000de efe0                      LDI ZL, LOW(sYmBoLs<<1)
                                 SCAN1:
0000df 9105                      LPM GREG1, Z+
0000e0 2300                      TST GREG1
0000e1 f099                      BREQ WAIT_FOR_DATA_JMP
0000e2 9583                      INC SYM_POINTER
0000e3 1770                      CP DREG, GREG1
0000e4 f009                      BREQ DONE1
0000e5 cff9                      RJMP SCAN1
                                 DONE1:
0000e6 958a                      DEC SYM_POINTER
0000e7 9508                      RET
                                 
                                 SYM_TO_ORG_H:
0000e8 9582                      SWAP SYM_POINTER
0000e9 e0f1                      LDI ZH, HIGH(sYmBoLs<<1)
0000ea efe0                      LDI ZL, LOW(sYmBoLs<<1)
                                 SCAN2:
0000eb 9105                      LPM GREG1, Z+
0000ec 2300                      TST GREG1
0000ed f039                      BREQ WAIT_FOR_DATA_JMP
0000ee 9583                      INC SYM_POINTER
0000ef 1770                      CP DREG, GREG1
0000f0 f009                      BREQ DONE2
0000f1 cff9                      RJMP SCAN2
                                 DONE2:
0000f2 958a                      DEC SYM_POINTER
0000f3 9582                      SWAP SYM_POINTER ; Return the lower and higher nibbles to their right places
0000f4 9508                      RET
                                 
                                 WAIT_FOR_DATA_JMP: 
0000f5 910f                      POP GREG1
0000f6 910f                      POP GREG1
0000f7 cf46                      RJMP WAIT_FOR_DATA
                                 
                                 ;--------------------------------------------------------
                                 
                                 ; ISRs:
                                 
                                 ;--------------------------------------------------------
                                 
                                 ; DELAYS:
                                 
                                 ;--------------------------------------------------------
                                 
                                 ; Stored data:
                                 
0000f8 0e0d
0000f9 1513
0000fa 1916
0000fb 1c1a
0000fc 2523
0000fd 2926
0000fe 2c2a
0000ff 3432
000100 0000                      sYmBoLs:  .DB 0x0D,  0x0E,  0x13,  0x15,  0x16,  0x19,  0x1A,  0x1C,  0x23,  0x25,  0x26,  0x29,  0x2A,  0x2C,  0x32,  0x34, 0x00, 0x00
                                 ;            001101 001110 010011 010101 010110 011001 011010 011100 100011 100101 100110 101001 101010 101100 110010 110100
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16A" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 108 r17:  18 r18:   0 r19:   5 r20:   5 
r21:   6 r22:   6 r23:  10 r24:  11 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   2 r31:   2 
Registers used: 11 out of 35 (31.4%)

"ATmega16A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   6 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 brlt  :   0 brmi  :   0 
brne  :   0 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  11 cpc   :   9 
cpi   :   2 cpse  :   0 dec   :   2 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  20 inc   :   2 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  46 lds   :   0 lpm   :   2 lsl   :   0 
lsr   :   0 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  34 pop   :   2 
push  :   0 rcall :   8 ret   :   2 reti  :   0 rjmp  :  25 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   2 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :  10 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   2 tst   :   2 wdr   :   0 
Instructions used: 22 out of 113 (19.5%)

"ATmega16A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000202    402     18    420   16384   2.6%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
